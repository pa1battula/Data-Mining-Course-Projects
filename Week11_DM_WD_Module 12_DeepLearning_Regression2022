{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"3utp-S1ay5r8"},"source":["#**Module 12: Neural Networks and Deep Learning--Regression**\n","Imagine you have lots of data--Big Data, as in 1,000,000 tuples and more per day--and need to build a classification system with utmost reliability because if you're wrong, the consequences may be detrimental to people or property. Would you use a simple tree? Or a k Nearest Neighbor? Or a Random Forest? Or would you want a system that combines a number of self-optimizing algorithm runs with an element of randomization and voting in order to give you the most reliable output?\n","\n","That, then would be a Deep Learning Network. **Deep Learning means nothing more than a Neural Network with multiple hidden layers,** in which data is summarized and analyzed and summarized and analyzed and so on. These pictures say it all:\n","\n","**A Simple Neural Network**\n","<div>\n","<center>\n","<img src=\"https://raw.githubusercontent.com/shstreuber/Data-Mining/master/images/simplenn_regression.png\" width=\"350\">\n","</div>\n","\n","**A Deep Neural Network**\n","<div>\n","<center>\n","<img src=\"https://raw.githubusercontent.com/shstreuber/Data-Mining/master/images/deepnn_regression.png\" width=\"600\">\n","</div>\n","\n","At the end of this module, you will be able to:\n","\n","* Configure 2 simple and 2 deep learning Regression Networks\n","* Describe how a Deep Neural Network works\n","* Configure TensorFlow and Keras\n","* Solve a simple Deep Learning problem\n","* Compare regular Neural Network output with Deep Learning output\n","\n","To get started, please watch this instructor video:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":336},"id":"zHb5bE3czqhH","executionInfo":{"status":"ok","timestamp":1648860330366,"user_tz":240,"elapsed":319,"user":{"displayName":"Sonja Streuber","userId":"03872648719424952237"}},"outputId":"5e6374e1-d9e3-483a-a0e8-60bbb8383812"},"source":["from IPython.display import HTML\n","HTML('<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RkiTL_T8VsY\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RkiTL_T8VsY\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"]},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"GzT4W7L3zg5E"},"source":["#**What is Tensorflow?**\n","Essentially, TensorFlow (a Google product) is an end-to-end open source machine learning **platform**. As a platform, it contains a number of libraries, or packages, the most well-known of which is Keras.\n","\n","The **GOAL** of TensorFlow is to train and run deep neural networks for handwritten digit classification, image recognition, word embeddings, recurrent neural networks, sequence-to-sequence models for machine translation, natural language processing, and PDE (partial differential equation) based simulations.\n","\n","##**Sooooo ... what is a Tensor?**\n","The vocabulary here may sound technical and daunting, but there are a few very simple concepts hiding behind it. A Tensor is simply a multidimensional array:\n","\n","* Scalar = 0D Tensor\n","* Vector = 1D Tensor\n","* Matrix = 2D Tensor\n","* Cube = 3D Tensor\n","\n","Thereby, we can deduce that a 4-D tensor is a vector of cubes, 5-D tensor is a matrix of cubes, 6-D tensor is a cube of cubes, etc. Take a look at the graphic below:\n","\n","<div>\n","<center>\n","<img src=\"https://raw.githubusercontent.com/shstreuber/Data-Mining/master/images/tensor.png\" width=\"600\">\n","</div>\n","\n","##**And How does it Work?**\n","Working with TensorFlow is  basically like setting up any other Classification:\n","0. You set up your libraries and load your data\n","1. You do your EDA (Exploratory Data Analysis) to see how the data is distributed and to determine what the class attribute in the dataset should be.\n","2. Preprocess the data (remove n/a, transform data types as needed, deal with missing data) and THEN normalize the data so we can apply the model weights without problems.\n","3. Split the data into a training set and a test set\n","4. Build the model based on the training set\n","5. Test the model on the test set\n","6. Determine the quality of the model"]},{"cell_type":"markdown","metadata":{"id":"2x_5G4kA5BcJ"},"source":["#**0. Preparation and Setup**\n","To wrap our head around the process of setting up a Deep Learning model, we will work with a dataset with which we are already familiar: The adult dataset."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":330},"id":"PUbUl6Mg5RH_","executionInfo":{"status":"ok","timestamp":1712191179621,"user_tz":300,"elapsed":557,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"08c4cabe-d0e4-4a2f-c1d0-93e20774c51c"},"source":["import tensorflow as tf # This tells Colab that we are using TensorFlow\n","\n","from tensorflow import keras # This is the main TensorFlow library\n","from tensorflow.keras import layers # We are building a Neural Network with several hidden layers\n","from tensorflow.keras.layers.experimental import preprocessing\n","\n","print(\"Current TensorFlow version is\", tf.__version__)\n","\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns # for visualization\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","np.random.seed(42)\n","\n","#Reading in the data as adult dataframe\n","adult = pd.read_csv(\"https://raw.githubusercontent.com/shstreuber/Data-Mining/master/data/adult.data.simplified.csv\")\n","adult.head()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Current TensorFlow version is 2.15.0\n"]},{"output_type":"execute_result","data":{"text/plain":["   age         workclass  education  educationyears       maritalstatus  \\\n","0   39         State-gov  Bachelors              13       Never-married   \n","1   50  Self-emp-not-inc  Bachelors              13  Married-civ-spouse   \n","2   38           Private    HS-grad               9            Divorced   \n","3   53           Private       11th               7  Married-civ-spouse   \n","4   28           Private  Bachelors              13  Married-civ-spouse   \n","\n","          occupation   relationship   race     sex  hoursperweek  \\\n","0       Adm-clerical  Not-in-family  White    Male            40   \n","1    Exec-managerial        Husband  White    Male            13   \n","2  Handlers-cleaners  Not-in-family  White    Male            40   \n","3  Handlers-cleaners        Husband  Black    Male            40   \n","4     Prof-specialty           Wife  Black  Female            40   \n","\n","   nativecountry  incomeUSD  \n","0  United-States      43747  \n","1  United-States      38907  \n","2  United-States      25055  \n","3  United-States      26733  \n","4           Cuba      23429  "],"text/html":["\n","  <div id=\"df-41ea0a1c-0f08-492e-a8b0-7f7590fc78a4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>workclass</th>\n","      <th>education</th>\n","      <th>educationyears</th>\n","      <th>maritalstatus</th>\n","      <th>occupation</th>\n","      <th>relationship</th>\n","      <th>race</th>\n","      <th>sex</th>\n","      <th>hoursperweek</th>\n","      <th>nativecountry</th>\n","      <th>incomeUSD</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>39</td>\n","      <td>State-gov</td>\n","      <td>Bachelors</td>\n","      <td>13</td>\n","      <td>Never-married</td>\n","      <td>Adm-clerical</td>\n","      <td>Not-in-family</td>\n","      <td>White</td>\n","      <td>Male</td>\n","      <td>40</td>\n","      <td>United-States</td>\n","      <td>43747</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>50</td>\n","      <td>Self-emp-not-inc</td>\n","      <td>Bachelors</td>\n","      <td>13</td>\n","      <td>Married-civ-spouse</td>\n","      <td>Exec-managerial</td>\n","      <td>Husband</td>\n","      <td>White</td>\n","      <td>Male</td>\n","      <td>13</td>\n","      <td>United-States</td>\n","      <td>38907</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>38</td>\n","      <td>Private</td>\n","      <td>HS-grad</td>\n","      <td>9</td>\n","      <td>Divorced</td>\n","      <td>Handlers-cleaners</td>\n","      <td>Not-in-family</td>\n","      <td>White</td>\n","      <td>Male</td>\n","      <td>40</td>\n","      <td>United-States</td>\n","      <td>25055</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>53</td>\n","      <td>Private</td>\n","      <td>11th</td>\n","      <td>7</td>\n","      <td>Married-civ-spouse</td>\n","      <td>Handlers-cleaners</td>\n","      <td>Husband</td>\n","      <td>Black</td>\n","      <td>Male</td>\n","      <td>40</td>\n","      <td>United-States</td>\n","      <td>26733</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>28</td>\n","      <td>Private</td>\n","      <td>Bachelors</td>\n","      <td>13</td>\n","      <td>Married-civ-spouse</td>\n","      <td>Prof-specialty</td>\n","      <td>Wife</td>\n","      <td>Black</td>\n","      <td>Female</td>\n","      <td>40</td>\n","      <td>Cuba</td>\n","      <td>23429</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-41ea0a1c-0f08-492e-a8b0-7f7590fc78a4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-41ea0a1c-0f08-492e-a8b0-7f7590fc78a4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-41ea0a1c-0f08-492e-a8b0-7f7590fc78a4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-dfdaa778-a0ec-46aa-8cf2-def609ef075e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dfdaa778-a0ec-46aa-8cf2-def609ef075e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-dfdaa778-a0ec-46aa-8cf2-def609ef075e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"adult","summary":"{\n  \"name\": \"adult\",\n  \"rows\": 32561,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 17,\n        \"max\": 90,\n        \"num_unique_values\": 73,\n        \"samples\": [\n          28,\n          73,\n          35\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workclass\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Without-pay\",\n          \"Self-emp-not-inc\",\n          \"?\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"education\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"Bachelors\",\n          \"HS-grad\",\n          \"Some-college\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"educationyears\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 16,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          13,\n          9,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"maritalstatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Never-married\",\n          \"Married-civ-spouse\",\n          \"Married-AF-spouse\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"occupation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"Machine-op-inspct\",\n          \"?\",\n          \"Adm-clerical\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"relationship\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Not-in-family\",\n          \"Husband\",\n          \"Other-relative\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"race\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Black\",\n          \"Other\",\n          \"Asian-Pac-Islander\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hoursperweek\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 1,\n        \"max\": 99,\n        \"num_unique_values\": 94,\n        \"samples\": [\n          6,\n          22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nativecountry\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 42,\n        \"samples\": [\n          \"El-Salvador\",\n          \"Philippines\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"incomeUSD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44374,\n        \"min\": 20002,\n        \"max\": 199965,\n        \"num_unique_values\": 24516,\n        \"samples\": [\n          153938,\n          24125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":29}]},{"cell_type":"markdown","metadata":{"id":"svkCY-1t54q2"},"source":["#**1. Exploratory Data Analysis**\n","How many rows does the adult dataset have? What are the attribute types? What is the mean, median, and mode of the incomeUSD attribute?\n","\n","These are all questions to solve. Use the code rows below to find the answers:"]},{"cell_type":"code","metadata":{"id":"6TXu6Ud8y0Ro","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1712191184987,"user_tz":300,"elapsed":235,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"5fa78006-8460-4c8f-de7d-3bd24551721d"},"source":["adult.describe(include=\"int\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                age  educationyears  hoursperweek      incomeUSD\n","count  32561.000000    32561.000000  32561.000000   32561.000000\n","mean      38.581647       10.080679     40.437456   56583.900587\n","std       13.640433        2.572720     12.347429   44374.594314\n","min       17.000000        1.000000      1.000000   20002.000000\n","25%       28.000000        9.000000     40.000000   29994.000000\n","50%       37.000000       10.000000     40.000000   39732.000000\n","75%       48.000000       12.000000     45.000000   49631.000000\n","max       90.000000       16.000000     99.000000  199965.000000"],"text/html":["\n","  <div id=\"df-fbb79ac7-2708-4b05-b365-3b09e83c0bd0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>educationyears</th>\n","      <th>hoursperweek</th>\n","      <th>incomeUSD</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>32561.000000</td>\n","      <td>32561.000000</td>\n","      <td>32561.000000</td>\n","      <td>32561.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>38.581647</td>\n","      <td>10.080679</td>\n","      <td>40.437456</td>\n","      <td>56583.900587</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>13.640433</td>\n","      <td>2.572720</td>\n","      <td>12.347429</td>\n","      <td>44374.594314</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>17.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>20002.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>28.000000</td>\n","      <td>9.000000</td>\n","      <td>40.000000</td>\n","      <td>29994.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>37.000000</td>\n","      <td>10.000000</td>\n","      <td>40.000000</td>\n","      <td>39732.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>48.000000</td>\n","      <td>12.000000</td>\n","      <td>45.000000</td>\n","      <td>49631.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>90.000000</td>\n","      <td>16.000000</td>\n","      <td>99.000000</td>\n","      <td>199965.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fbb79ac7-2708-4b05-b365-3b09e83c0bd0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fbb79ac7-2708-4b05-b365-3b09e83c0bd0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fbb79ac7-2708-4b05-b365-3b09e83c0bd0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0e228147-7e87-41a0-8a6d-510d37557683\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0e228147-7e87-41a0-8a6d-510d37557683')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0e228147-7e87-41a0-8a6d-510d37557683 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"adult\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11498.327099385337,\n        \"min\": 13.640432553581341,\n        \"max\": 32561.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          38.58164675532078,\n          37.0,\n          32561.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"educationyears\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11508.98951393426,\n        \"min\": 1.0,\n        \"max\": 32561.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10.0806793403151,\n          10.0,\n          32561.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hoursperweek\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11498.057671750134,\n        \"min\": 1.0,\n        \"max\": 32561.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          32561.0,\n          40.437455852092995,\n          45.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"incomeUSD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 58077.57012751155,\n        \"min\": 20002.0,\n        \"max\": 199965.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          56583.90058659132,\n          39732.0,\n          32561.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"Cfx-mqha6c9z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712191190233,"user_tz":300,"elapsed":360,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"a88f4c8d-7b38-4234-f56c-da9a80291102"},"source":["adult[['age', 'educationyears','incomeUSD', 'hoursperweek']].median()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["age                  37.0\n","educationyears       10.0\n","incomeUSD         39732.0\n","hoursperweek         40.0\n","dtype: float64"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"cmMYxX7x6dzF","colab":{"base_uri":"https://localhost:8080/","height":112},"executionInfo":{"status":"ok","timestamp":1712191191887,"user_tz":300,"elapsed":220,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"ea344837-f5d2-4135-8d8d-a4c2e700c595"},"source":["adult[['age', 'educationyears','incomeUSD', 'hoursperweek']].mode()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    age  educationyears  incomeUSD  hoursperweek\n","0  36.0             9.0      29342          40.0\n","1   NaN             NaN      42427           NaN"],"text/html":["\n","  <div id=\"df-4fe256e5-d150-4809-aad1-84d7b10918bc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>educationyears</th>\n","      <th>incomeUSD</th>\n","      <th>hoursperweek</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>36.0</td>\n","      <td>9.0</td>\n","      <td>29342</td>\n","      <td>40.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>42427</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4fe256e5-d150-4809-aad1-84d7b10918bc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4fe256e5-d150-4809-aad1-84d7b10918bc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4fe256e5-d150-4809-aad1-84d7b10918bc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-daff4efc-a7ba-45bb-a0a9-0587f66d07f6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-daff4efc-a7ba-45bb-a0a9-0587f66d07f6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-daff4efc-a7ba-45bb-a0a9-0587f66d07f6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"adult[['age', 'educationyears','incomeUSD', 'hoursperweek']]\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 36.0,\n        \"max\": 36.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          36.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"educationyears\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 9.0,\n        \"max\": 9.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"incomeUSD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9252,\n        \"min\": 29342,\n        \"max\": 42427,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          42427\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hoursperweek\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 40.0,\n        \"max\": 40.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          40.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","metadata":{"id":"lwar0tYH0EAC"},"source":[]},{"cell_type":"markdown","metadata":{"id":"XYNfxVhB6efh"},"source":["# **2. Preprocessing**\n","As with the simple Neural Networks you have encountered already, preprocessing is a bit more involved than with, say, a Random Forest algorithm.\n","<div>\n","<center>\n","<img src=\"https://raw.githubusercontent.com/shstreuber/Data-Mining/master/images/TF_Process1.png\" width=\"600\">\n","</div>"]},{"cell_type":"markdown","metadata":{"id":"2uNkowDWq2ST"},"source":["##**2.1 Reducing the Data**\n"]},{"cell_type":"markdown","metadata":{"id":"oFNTyz36EXjJ"},"source":["##Your Turn\n","You have done this before with the insurance dataset: Build an adult_dl dataset consisting of age, educationyears, race, hoursperweek, and incomeUSD as the class attribute"]},{"cell_type":"code","metadata":{"id":"-BM-pAfg72wF","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1712194314703,"user_tz":300,"elapsed":254,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"5560b72b-7028-43ba-f0a6-c72b4d339506"},"source":["adult_dl = pd.DataFrame(adult, columns = ['age', 'educationyears', 'race','hoursperweek','incomeUSD'])\n","adult_dl.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age  educationyears   race  hoursperweek  incomeUSD\n","0   39              13  White            40      43747\n","1   50              13  White            13      38907\n","2   38               9  White            40      25055\n","3   53               7  Black            40      26733\n","4   28              13  Black            40      23429"],"text/html":["\n","  <div id=\"df-9990c571-0ff9-4c43-838c-dea9119f7a2b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>educationyears</th>\n","      <th>race</th>\n","      <th>hoursperweek</th>\n","      <th>incomeUSD</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>39</td>\n","      <td>13</td>\n","      <td>White</td>\n","      <td>40</td>\n","      <td>43747</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>50</td>\n","      <td>13</td>\n","      <td>White</td>\n","      <td>13</td>\n","      <td>38907</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>38</td>\n","      <td>9</td>\n","      <td>White</td>\n","      <td>40</td>\n","      <td>25055</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>53</td>\n","      <td>7</td>\n","      <td>Black</td>\n","      <td>40</td>\n","      <td>26733</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>28</td>\n","      <td>13</td>\n","      <td>Black</td>\n","      <td>40</td>\n","      <td>23429</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9990c571-0ff9-4c43-838c-dea9119f7a2b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9990c571-0ff9-4c43-838c-dea9119f7a2b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9990c571-0ff9-4c43-838c-dea9119f7a2b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8a2aba57-6979-461f-9890-dc128bc79f3f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8a2aba57-6979-461f-9890-dc128bc79f3f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8a2aba57-6979-461f-9890-dc128bc79f3f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"adult_dl","summary":"{\n  \"name\": \"adult_dl\",\n  \"rows\": 32561,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 17,\n        \"max\": 90,\n        \"num_unique_values\": 73,\n        \"samples\": [\n          28,\n          73,\n          35\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"educationyears\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 16,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          13,\n          9,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"race\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Black\",\n          \"Other\",\n          \"Asian-Pac-Islander\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hoursperweek\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 1,\n        \"max\": 99,\n        \"num_unique_values\": 94,\n        \"samples\": [\n          6,\n          22,\n          99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"incomeUSD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44374,\n        \"min\": 20002,\n        \"max\": 199965,\n        \"num_unique_values\": 24516,\n        \"samples\": [\n          153938,\n          24125,\n          126028\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":43}]},{"cell_type":"markdown","metadata":{"id":"ObVGq_Sg8C5N"},"source":["##**2.2 Preparing the Data for use with TensorFlow**\n","In this section, you will see that preparing data to work with a Deep Learning Neural Network requires the same kind of preprocessing that you have already encountered:\n","\n"]},{"cell_type":"markdown","metadata":{"id":"5P5EQ9M1w_7j"},"source":["### **2.2.1 Encoding Categorical Variables**\n","Did you remember that Neural Networks (regular **and** in TensorFlow) require only numeric data? Well ... \"race\" is quite obviously categorical, so we need to convert it to one-hot format. We do this with pd.dummies()"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"fsXwA597zKY4","executionInfo":{"status":"ok","timestamp":1712194319049,"user_tz":300,"elapsed":240,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"17245d2f-ab01-4e91-95af-80b38e38c9e7"},"source":["adult_dl = pd.get_dummies(adult_dl, columns=['race'], dtype='int', prefix='', prefix_sep='')\n","adult_dl.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age  educationyears  hoursperweek  incomeUSD  Amer-Indian-Eskimo  \\\n","0   39              13            40      43747                   0   \n","1   50              13            13      38907                   0   \n","2   38               9            40      25055                   0   \n","3   53               7            40      26733                   0   \n","4   28              13            40      23429                   0   \n","\n","   Asian-Pac-Islander  Black  Other  White  \n","0                   0      0      0      1  \n","1                   0      0      0      1  \n","2                   0      0      0      1  \n","3                   0      1      0      0  \n","4                   0      1      0      0  "],"text/html":["\n","  <div id=\"df-d31f181d-3162-4dcf-9e8c-44178ab950cb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>educationyears</th>\n","      <th>hoursperweek</th>\n","      <th>incomeUSD</th>\n","      <th>Amer-Indian-Eskimo</th>\n","      <th>Asian-Pac-Islander</th>\n","      <th>Black</th>\n","      <th>Other</th>\n","      <th>White</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>39</td>\n","      <td>13</td>\n","      <td>40</td>\n","      <td>43747</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>50</td>\n","      <td>13</td>\n","      <td>13</td>\n","      <td>38907</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>38</td>\n","      <td>9</td>\n","      <td>40</td>\n","      <td>25055</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>53</td>\n","      <td>7</td>\n","      <td>40</td>\n","      <td>26733</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>28</td>\n","      <td>13</td>\n","      <td>40</td>\n","      <td>23429</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d31f181d-3162-4dcf-9e8c-44178ab950cb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d31f181d-3162-4dcf-9e8c-44178ab950cb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d31f181d-3162-4dcf-9e8c-44178ab950cb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-427bdc81-b17d-4e93-9de7-1a985c624574\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-427bdc81-b17d-4e93-9de7-1a985c624574')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-427bdc81-b17d-4e93-9de7-1a985c624574 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"adult_dl","summary":"{\n  \"name\": \"adult_dl\",\n  \"rows\": 32561,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 17,\n        \"max\": 90,\n        \"num_unique_values\": 73,\n        \"samples\": [\n          28,\n          73,\n          35\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"educationyears\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 16,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          13,\n          9,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hoursperweek\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 1,\n        \"max\": 99,\n        \"num_unique_values\": 94,\n        \"samples\": [\n          6,\n          22,\n          99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"incomeUSD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44374,\n        \"min\": 20002,\n        \"max\": 199965,\n        \"num_unique_values\": 24516,\n        \"samples\": [\n          153938,\n          24125,\n          126028\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Amer-Indian-Eskimo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Asian-Pac-Islander\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Black\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Other\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"White\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":44}]},{"cell_type":"markdown","metadata":{"id":"ZEmkap4x2HKb"},"source":["### **2.2.2 Splitting into Training and Test Set**\n","We will do this first since we will want to reduce the amount of data that we will have to normalize."]},{"cell_type":"code","metadata":{"id":"VDuoUaeU2Tfm"},"source":["train_dataset = adult_dl.sample(frac=0.8, random_state=0)\n","test_dataset = adult_dl.drop(train_dataset.index)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PefhBuEj2nHW"},"source":["### **2.2.3 Splitting Features from Labels**\n","Separate the target value, the \"label\", from the features. This label is the value that you will train the model to predict--in our case, we want to predict incomeUSD."]},{"cell_type":"code","metadata":{"id":"DOaQmB3L2vKj"},"source":["train_features = train_dataset.copy()\n","test_features = test_dataset.copy()\n","\n","train_labels = train_features.pop('incomeUSD')\n","test_labels = test_features.pop('incomeUSD')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tXou63hL1Gg_"},"source":["### **2.2.4 Normalizing**\n","Except for age and educationyears, which are both measured in years, all other variables are measured in **different units**. This also puts them on **different scales**. Since, in a Neural Network, we need all our values on the **same scale**, so that the weights can be applied uniformly, we need to normalize! One reason this is important is because the features are multiplied by the model weights. So the scale of the outputs and the scale of the gradients are affected by the scale of the inputs.\n","\n","The [**preprocessing.Normalization layer**](https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing/Normalization) is a clean and simple way to build that preprocessing into your model. And YES--by creating the normalization layer, you effectively just started building your TensorFlow model:"]},{"cell_type":"code","metadata":{"id":"u3zzDTud1vxI"},"source":["normalizer = preprocessing.Normalization(axis=-1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"b1Mw1Ptl4KTp"},"source":["Now we apply the normalizer to the data:"]},{"cell_type":"code","metadata":{"id":"iFxkYAQs4N6V"},"source":["normalizer.adapt(np.array(train_features))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3b2bfnyc4Soc"},"source":["This calculates the mean and variance, and stores them in the layer."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iFuXKv-M4YL5","executionInfo":{"status":"ok","timestamp":1712194338334,"user_tz":300,"elapsed":303,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"13b3ff6c-93d0-4060-d4b0-eb8fc954a3d6"},"source":["print(normalizer.mean.numpy())"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[3.8507965e+01 1.0091838e+01 4.0392166e+01 9.2134075e-03 3.2746013e-02\n","  9.5973052e-02 8.4840171e-03 8.5358381e-01]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"twvUHFO_4hC3"},"source":["When the layer is called it returns the input data, with each feature independently normalized:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dqt9CbSR4iao","executionInfo":{"status":"ok","timestamp":1712194339867,"user_tz":300,"elapsed":192,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"4279c975-0a33-474d-f7fe-c940338e96e2"},"source":["first = np.array(train_features[:1])\n","\n","with np.printoptions(precision=2, suppress=True):\n","  print('Original data:', first)\n","  print()\n","  print('Normalized data:', normalizer(first).numpy())"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original data: [[27 10 44  0  0  0  0  1]]\n","\n","Normalized data: [[-0.84 -0.04  0.29 -0.1  -0.18 -0.33 -0.09  0.41]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"VS323LJk40_b"},"source":["# **3. Building the Models**\n","There is always a specific process with which to build a TensorFlow model:\n","<div>\n","<center>\n","<img src=\"https://raw.githubusercontent.com/shstreuber/Data-Mining/master/images/TF_Process2.png\" width=\"600\">\n","</div>\n","\n","1. First, we set up the **keras SEQUENTIAL MODEL**. This is the framework inside of which we are going to define the layers. Sequential = layers are sequentially next to each other (either “stacked” or left-to-right, depending on how you draw them).\n","---\n","2. Inside the Sequential model, we define the **LAYERS**. To do this, we need to know the following:\n","* **Shape**: This is the number of attributes we use as input for the model\n","---\n","3. In the next step, we define HOW we want the model to run, that is to **COMPILE**, with model.compile(). To do this, we need to know the following:\n","* **Optimizer** = gradient descent function (i.e. which function we use to optimize the step-down of the weights); adam = adaptive learning rate optimization algorithm\n","* **Loss Function**= evaluation of the ŷ vs the ground truth\n","* **Metrics** = evaluation criterion, here accuracy.\n","---\n","4. Then, we **FIT** the model to the training set with model.fit(). To do this, we need to know the following:\n","* **Epoch**: One Epoch is when an ENTIRE dataset is passed forward and backward through the neural network only ONCE. If one epoch is too big to feed to the computer at once we can divide it in several smaller batches\n","* **Batch size**: Depending on the number of needed features in your dataset (you should reduce these to NO MORE THAN 6), the computing effort can be too intense. Just like you would not each a whole sandwich in one bite, the machine does better when processing the data in smaller bites called batches. The standard batch size is 32.\n","---\n","5. Lastly (and in purple!), we use our model to **PREDICT** the values for the test set with model.predict()\n","---\n","**How we choose the LOSS FUNCTION** for step 3 depends on the type of calculation we need our Neural Network to perform:\n","* If the output variable is **continuous**, we are performing a regression, so the loss function is **mean squared error or MSE**\n","* If the output variable is **binary**, we are performing a classification, so the loss function is **binary_crossentropy**\n","* If the output variable is **categorical** with more than two labels, we are still performing a classification, but now the loss function is **categorical_crossentropy**\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Fi1HyF7z44HR"},"source":["##**3.1 REGRESSION: Using one Variable to predict incomeUSD in a Simple Neural Network**\n","We will use age to predict incomeUSD. To do so, we will use a keras.Sequential model. This model represents a sequence of steps. In this case there are two steps:\n","\n","1. Normalize the input ['age'].\n","2. Apply a linear transformation () to produce 1 output using layers.Dense.\n","\n","The number of inputs can either be set by the input_shape argument, or automatically when the model is run for the first time."]},{"cell_type":"code","metadata":{"id":"K-FrbA9NBRgK"},"source":["# First, we build the normalization layer:\n","age_new = np.array(train_features['age'])\n","\n","age_normalizer = preprocessing.Normalization(input_shape=[1,], axis=None)\n","age_normalizer.adapt(age_new)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zBgORl4A_M-3","executionInfo":{"status":"ok","timestamp":1712194414294,"user_tz":300,"elapsed":231,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"e35ee641-7c5d-4dcf-a886-3028eb7a2ff1"},"source":["# Now we build the framework that holds all the models:\n","age_model = tf.keras.Sequential([\n","    age_normalizer,\n","    layers.Dense(units=1)\n","])\n","\n","age_model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," normalization_2 (Normaliza  (None, 1)                 3         \n"," tion)                                                           \n","                                                                 \n"," dense (Dense)               (None, 1)                 2         \n","                                                                 \n","=================================================================\n","Total params: 5 (24.00 Byte)\n","Trainable params: 2 (8.00 Byte)\n","Non-trainable params: 3 (16.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"Uc5_BniXDdSU"},"source":["Now we can configure the training procedure using the Model.compile() method. The most important arguments to compile are the loss and the optimizer since these define what will be optimized (mean_absolute_error) and how (using the [optimizers.Adam](https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/Adam))."]},{"cell_type":"code","metadata":{"id":"7zL3vNLLDiO3"},"source":["age_model.compile(\n","    optimizer=tf.optimizers.Adam(learning_rate=0.1),\n","    loss='mean_absolute_error')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"d1AxoAvHDtqa"},"source":["Once the model is configured, we use Model.fit() to train it (give this about 1-2 minutes):"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jCFlvfrMDiWs","executionInfo":{"status":"ok","timestamp":1712194543513,"user_tz":300,"elapsed":120620,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"a1b7e3ef-58a9-4db3-ffa2-e7d6b72996a2"},"source":["%%time\n","history = age_model.fit(\n","    train_features['age'], train_labels,\n","    epochs=100,\n","    # suppress logging\n","    verbose=0,\n","    # Calculate validation results on 20% of the training data. Validation means that we test as we go, on a 20% subset of the training data\n","    validation_split = 0.2)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 2min 1s, sys: 6.84 s, total: 2min 8s\n","Wall time: 2min\n"]}]},{"cell_type":"code","source":["train_features['age']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y8ueGxNLwwiL","executionInfo":{"status":"ok","timestamp":1712194543513,"user_tz":300,"elapsed":3,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"1e66dfca-2f2b-4be4-cd2f-a60885b3f5c4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["22278    27\n","8950     27\n","7838     25\n","16505    46\n","19140    45\n","         ..\n","12877    36\n","13288    28\n","2751     55\n","11903    34\n","17632    48\n","Name: age, Length: 26049, dtype: int64"]},"metadata":{},"execution_count":55}]},{"cell_type":"markdown","metadata":{"id":"0eJIetubEUEY"},"source":["Visualize the model's training results (you must run the code fields to see the graph):"]},{"cell_type":"code","metadata":{"id":"EIOA_tsOAS_W","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712194554096,"user_tz":300,"elapsed":458,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"6fd22ad5-9936-4945-dfa4-b3a4f4ce39c2"},"source":["x = tf.linspace(0.0, 100, 151)\n","y = age_model.predict(x)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5/5 [==============================] - 0s 3ms/step\n"]}]},{"cell_type":"code","metadata":{"id":"j_IVJUMrAn0a","colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"status":"ok","timestamp":1712194557092,"user_tz":300,"elapsed":1770,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"e88dbf22-999c-444c-9302-8580fb63a59c"},"source":["def plot_age(x, y):\n","  plt.scatter(train_features['age'], train_labels, label='Data')\n","  plt.plot(x, y, color='k', label='Predictions')\n","  plt.xlabel('age')\n","  plt.ylabel('incomeUSD')\n","  plt.legend()\n","plot_age(x,y)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"n-PrtMxmBUTj"},"source":["As you can see, the output here is abysmal. Let's see if we have better luck with the next model"]},{"cell_type":"markdown","metadata":{"id":"AFlI3cVH0maC"},"source":["##Your Turn\n","You've seen the model build -- well, you haven't, really.\n","1. Copy the code above into the code section below and turn verbose on\n","2. Set the number of epochs to 10, so you don't have to wait so long\n","3. Observe how the loss function decreases over each epoch:"]},{"cell_type":"code","metadata":{"id":"xbFrOTmv09XL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712194600157,"user_tz":300,"elapsed":20853,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"c263898f-cc3c-425a-fcd6-1a553b6fe75b"},"source":["%%time\n","history = age_model.fit(\n","    train_features['age'], train_labels,\n","    epochs=10,\n","    # suppress logging\n","    verbose=1,\n","    # Calculate validation results on 20% of the training data. Validation means that we test as we go, on a 20% subset of the training data\n","    validation_split = 0.2)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","652/652 [==============================] - 1s 2ms/step - loss: 50405.3125 - val_loss: 49202.0273\n","Epoch 2/10\n","652/652 [==============================] - 1s 2ms/step - loss: 50340.0508 - val_loss: 49136.7461\n","Epoch 3/10\n","652/652 [==============================] - 1s 2ms/step - loss: 50274.8242 - val_loss: 49071.5039\n","Epoch 4/10\n","652/652 [==============================] - 2s 3ms/step - loss: 50209.5352 - val_loss: 49006.2422\n","Epoch 5/10\n","652/652 [==============================] - 2s 2ms/step - loss: 50144.2734 - val_loss: 48940.9766\n","Epoch 6/10\n","652/652 [==============================] - 2s 3ms/step - loss: 50079.0234 - val_loss: 48875.7148\n","Epoch 7/10\n","652/652 [==============================] - 1s 2ms/step - loss: 50013.7617 - val_loss: 48810.4648\n","Epoch 8/10\n","652/652 [==============================] - 1s 2ms/step - loss: 49948.4727 - val_loss: 48745.1992\n","Epoch 9/10\n","652/652 [==============================] - 1s 2ms/step - loss: 49883.2148 - val_loss: 48679.9492\n","Epoch 10/10\n","652/652 [==============================] - 1s 2ms/step - loss: 49817.9648 - val_loss: 48614.6719\n","CPU times: user 14.9 s, sys: 756 ms, total: 15.6 s\n","Wall time: 21 s\n"]}]},{"cell_type":"markdown","metadata":{"id":"Gc1f9q1dEDAV"},"source":["Now let's test this on the test set and collect the results so we can inspect them at the end of this file:"]},{"cell_type":"code","metadata":{"id":"vyAVqluWugku","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712194609364,"user_tz":300,"elapsed":875,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"9a5fc94b-88d9-4c79-8750-cc3c98806388"},"source":["test_results = {}\n","\n","test_results['age_model'] = age_model.evaluate(\n","    test_features['age'],\n","    test_labels, verbose=1)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["204/204 [==============================] - 0s 2ms/step - loss: 48830.0508\n"]}]},{"cell_type":"markdown","metadata":{"id":"MGckOL4OuqAH"},"source":["This is a regression with a single variable--way too simplistic for our purposes! On to bigger and better things!"]},{"cell_type":"markdown","metadata":{"id":"PyAIVER5vfNS"},"source":["## **3.2 REGRESSION: Using Multiple Variables to Predict incomeUSD in a Simple Neural Network**"]},{"cell_type":"markdown","metadata":{"id":"Jbt4A31Yvrv-"},"source":["You can use an almost identical setup to make predictions based on multiple inputs. This model still does the same y - mx + b except that m is a matrix and b is a vector.\n","\n","This time, we use the Normalization layer that was adapted to the whole dataset."]},{"cell_type":"code","metadata":{"id":"DqIVUbsKv7Yu"},"source":["linear_model = tf.keras.Sequential([\n","    normalizer,\n","    layers.Dense(units=1)\n","])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"baZH3g_CwK5K"},"source":["When you call the model, its weight matrices will be built. You can see that the kernel (the m in y = mx + b) has a shape of (8,1)."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PstTgNeawWRU","executionInfo":{"status":"ok","timestamp":1712194897384,"user_tz":300,"elapsed":7,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"ea0bc5ad-85f2-41ee-89ba-ec995b5acb1c"},"source":["linear_model.layers[1].kernel"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Variable 'dense_2/kernel:0' shape=(8, 1) dtype=float32, numpy=\n","array([[-0.6229346 ],\n","       [-0.37085572],\n","       [-0.02531016],\n","       [ 0.01294386],\n","       [ 0.02247226],\n","       [-0.0510844 ],\n","       [-0.7305067 ],\n","       [-0.7883603 ]], dtype=float32)>"]},"metadata":{},"execution_count":67}]},{"cell_type":"markdown","metadata":{"id":"diKM-dKTwdho"},"source":["Now, we configure the model's runtime execution with the same compile and fit calls as for the single input age model:"]},{"cell_type":"code","metadata":{"id":"_wO8dfkkwhvI"},"source":["linear_model.compile(\n","    optimizer=tf.optimizers.Adam(learning_rate=0.1),\n","    loss='mean_absolute_error')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KKKIMHS9wput","executionInfo":{"status":"ok","timestamp":1712194926452,"user_tz":300,"elapsed":15328,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"7010d95e-803e-4da4-b968-90fd10a2cc71"},"source":["%%time\n","history = linear_model.fit(\n","    train_features, train_labels,\n","    epochs=10,\n","    # 10 epochs, so we turn on logging\n","    verbose=1,\n","    # Calculate validation results on 20% of the training data\n","    validation_split = 0.2)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","652/652 [==============================] - 2s 2ms/step - loss: 56929.4844 - val_loss: 55725.9375\n","Epoch 2/10\n","652/652 [==============================] - 1s 2ms/step - loss: 56864.2344 - val_loss: 55660.9961\n","Epoch 3/10\n","652/652 [==============================] - 1s 2ms/step - loss: 56798.9961 - val_loss: 55596.0156\n","Epoch 4/10\n","652/652 [==============================] - 1s 2ms/step - loss: 56733.7344 - val_loss: 55531.0508\n","Epoch 5/10\n","652/652 [==============================] - 1s 2ms/step - loss: 56668.4414 - val_loss: 55466.0781\n","Epoch 6/10\n","652/652 [==============================] - 1s 2ms/step - loss: 56603.1562 - val_loss: 55401.0781\n","Epoch 7/10\n","652/652 [==============================] - 2s 3ms/step - loss: 56537.9492 - val_loss: 55336.1328\n","Epoch 8/10\n","652/652 [==============================] - 2s 2ms/step - loss: 56472.6484 - val_loss: 55271.1602\n","Epoch 9/10\n","652/652 [==============================] - 1s 2ms/step - loss: 56407.4102 - val_loss: 55206.2031\n","Epoch 10/10\n","652/652 [==============================] - 1s 2ms/step - loss: 56342.2031 - val_loss: 55141.2656\n","CPU times: user 15.5 s, sys: 847 ms, total: 16.3 s\n","Wall time: 15 s\n"]}]},{"cell_type":"markdown","metadata":{"id":"e0myiyL-ydWy"},"source":["Just like before, we collect the results in the test_results variable again:"]},{"cell_type":"code","metadata":{"id":"9FlEqQxSyh9v","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712195029257,"user_tz":300,"elapsed":2736,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"419117d6-45b2-4eb0-a6bc-b06cd77429ce"},"source":["test_results['linear_model'] = linear_model.evaluate(\n","    test_features, test_labels, verbose=1)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["204/204 [==============================] - 2s 10ms/step - loss: 55356.1758\n"]}]},{"cell_type":"markdown","metadata":{"id":"hj1wYh_qlsdS"},"source":["## Your Turn\n","What is the command to display the current contents of the test_results variable? Type it below and inspect the results! What do you see?"]},{"cell_type":"code","metadata":{"id":"s2KvxzFJluL1","colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"status":"ok","timestamp":1712195042866,"user_tz":300,"elapsed":1752,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"0c1059d4-038f-4fc8-c06a-a0a90f8e9cac"},"source":["def plot_age(x, y):\n","  plt.scatter(train_features['age'], train_labels, label='Data')\n","  plt.plot(x, y, color='k', label='Predictions')\n","  plt.xlabel('age')\n","  plt.ylabel('incomeUSD')\n","  plt.legend()\n","plot_age(x,y)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"_KWik3H_ys0G"},"source":["## **3.3 REGRESSION: Deep Neural Network (DNN)**\n"]},{"cell_type":"markdown","metadata":{"id":"1fBO1pEHzCEQ"},"source":["The previous section implemented linear models for single and multiple inputs in a **Simple Neural Network.**\n","\n","\n","\n","This section implements single-input and multiple-input DNN models. The code is basically the same except **the model is expanded to include some \"hidden\" non-linear layers**. The name \"hidden\" here just means not directly connected to the inputs or outputs.\n","\n","These models will contain a few more layers than the linear model:\n","\n","1. The normalization layer (imagine this as hidden layer 1 in the graphic below)\n","2. Two hidden, nonlinear, Dense layers using the relu nonlinearity (hidden layers 2 and 3 in the graphic below)\n","3. A linear single-output layer because we are calculating ONE regression output.\n","\n","<div>\n","<center>\n","<img src=\"https://raw.githubusercontent.com/shstreuber/Data-Mining/master/images/deepnn_regression.png\" width=\"600\">\n","</div>\n","\n","Both will use the same training procedure so the compile method is included in the build_and_compile_model function below.\n","\n","###**Deep Neural Network Model Code Below**\n","Here it is! NOTE that now, we are building and configuring the layers!\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"-RUfA-v7zNCQ"},"source":["def build_and_compile_model(norm):\n","  model = keras.Sequential([                 # Here you are setting up the keras.Sequential architecture\n","      norm,                                  # This is the normalizer function we built before\n","      layers.Dense(64, activation='relu'),   # Here is the first hidden layer--64 nodes, built with the relu function\n","      layers.Dense(64, activation='relu'),   # Here is the second hidden layer, also built with the relu function\n","      layers.Dense(1)                        # Here is the Dense layer for a single output because we are working on a REGRESSION\n","  ])                                         # AND WE'RE DONE WITH BUILDING THE MODEL!\n","\n","  model.compile(loss='mean_absolute_error',   # Now we configure the runtime for our model; the loss function is mean absolute error--makes sense for a regression!\n","                optimizer=tf.keras.optimizers.Adam(0.001))\n","  return model"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sNIsFYij0Kyd"},"source":["### **3.3.1 REGRESSION--One Variable**\n","As before, we use the age variable to predice incomeUSD"]},{"cell_type":"code","metadata":{"id":"WwTGLgmn0VLO"},"source":["dnn_age_model = build_and_compile_model(age_normalizer)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lZZKGCBX0d3U"},"source":["This model has quite a few more trainable parameters than the linear models."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QQUyjuXU0e0_","executionInfo":{"status":"ok","timestamp":1648864548541,"user_tz":240,"elapsed":148,"user":{"displayName":"Sonja Streuber","userId":"03872648719424952237"}},"outputId":"acd23d36-ffe0-41b6-8b9e-a5ce5f994148"},"source":["dnn_age_model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," normalization_1 (Normalizat  (None, 1)                3         \n"," ion)                                                            \n","                                                                 \n"," dense_2 (Dense)             (None, 64)                128       \n","                                                                 \n"," dense_3 (Dense)             (None, 64)                4160      \n","                                                                 \n"," dense_4 (Dense)             (None, 1)                 65        \n","                                                                 \n","=================================================================\n","Total params: 4,356\n","Trainable params: 4,353\n","Non-trainable params: 3\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"xTVf1W8-0m7s"},"source":["Now, we train the model:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pdNzp5h50tMO","executionInfo":{"status":"ok","timestamp":1648864565589,"user_tz":240,"elapsed":14461,"user":{"displayName":"Sonja Streuber","userId":"03872648719424952237"}},"outputId":"22165a82-0546-4852-c332-91df0c4d5d59"},"source":["%%time\n","history = dnn_age_model.fit(\n","    train_features['age'], train_labels,\n","    validation_split=0.2,\n","    verbose=1, epochs=10)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","652/652 [==============================] - 2s 2ms/step - loss: 55952.1562 - val_loss: 51683.7773\n","Epoch 2/10\n","652/652 [==============================] - 1s 2ms/step - loss: 42762.7148 - val_loss: 29643.2031\n","Epoch 3/10\n","652/652 [==============================] - 1s 2ms/step - loss: 28107.0312 - val_loss: 26094.0293\n","Epoch 4/10\n","652/652 [==============================] - 1s 2ms/step - loss: 27193.6426 - val_loss: 25895.6465\n","Epoch 5/10\n","652/652 [==============================] - 1s 2ms/step - loss: 27057.1426 - val_loss: 25801.7598\n","Epoch 6/10\n","652/652 [==============================] - 1s 2ms/step - loss: 26979.5117 - val_loss: 25747.4180\n","Epoch 7/10\n","652/652 [==============================] - 1s 2ms/step - loss: 26933.0332 - val_loss: 25719.2070\n","Epoch 8/10\n","652/652 [==============================] - 1s 2ms/step - loss: 26906.4297 - val_loss: 25705.4609\n","Epoch 9/10\n","652/652 [==============================] - 1s 2ms/step - loss: 26892.7168 - val_loss: 25692.8945\n","Epoch 10/10\n","652/652 [==============================] - 1s 2ms/step - loss: 26880.3809 - val_loss: 25686.7109\n","CPU times: user 15.8 s, sys: 1.04 s, total: 16.8 s\n","Wall time: 14.3 s\n"]}]},{"cell_type":"code","source":["train_labels"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"taPL4VmJ_CwI","executionInfo":{"status":"ok","timestamp":1648864573485,"user_tz":240,"elapsed":141,"user":{"displayName":"Sonja Streuber","userId":"03872648719424952237"}},"outputId":"22517ed1-0616-42ca-c559-6c7414bcd6ab"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["22278     27267\n","8950      26135\n","7838      46605\n","16505     30635\n","19140    189367\n","          ...  \n","12877     29038\n","13288     34232\n","2751      44265\n","11903     41255\n","17632     22011\n","Name: incomeUSD, Length: 26049, dtype: int64"]},"metadata":{},"execution_count":38}]},{"cell_type":"markdown","metadata":{"id":"qiwtPeLJB7lQ"},"source":["And we plot the outcomes:"]},{"cell_type":"code","metadata":{"id":"-kuceR4fB-ig"},"source":["x = tf.linspace(0.0, 250, 251)\n","y = dnn_age_model.predict(x)\n","\n","plot_age(x, y)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"c7V2XJz7CMDO"},"source":["Wow! Our model does a much better job! But is it a good job? Not yet."]},{"cell_type":"markdown","metadata":{"id":"xUpPmDiK0-JQ"},"source":["And we collect the test results:"]},{"cell_type":"code","metadata":{"id":"To9dY4na1Bbt"},"source":["test_results['dnn_age_model'] = dnn_age_model.evaluate(\n","    test_features['age'], test_labels,\n","    verbose=0)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Y-Gwu9xw1Qz7"},"source":["### **3.3.2 REGRESSION: Multiple Variables**\n","If you repeat this process using all the inputs it slightly improves the performance on the validation dataset."]},{"cell_type":"code","metadata":{"id":"HVS07zOT1efm"},"source":["dnn_model = build_and_compile_model(normalizer)\n","dnn_model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_ob1LsbR1oZx"},"source":["%%time\n","history = dnn_model.fit(\n","    train_features, train_labels,\n","    validation_split=0.2,\n","    verbose=1, epochs=10)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"R6T-OKdlCkU5"},"source":["Let's see if our predictions come closer to the actual data distribution (run the code below to see the graph):"]},{"cell_type":"code","source":["%%time\n","history = dnn_model.fit(\n","    train_features, train_labels,\n","    validation_split=0.2,\n","    verbose=1, epochs=0)"],"metadata":{"id":"QHlfTHh9u3Z6"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Sj4ILEYiCplW"},"source":["test_predictions = dnn_model.predict(test_features).flatten()\n","\n","a = plt.axes(aspect='equal')\n","plt.scatter(test_labels, test_predictions)\n","plt.xlabel('True Values [incomeUSD]')\n","plt.ylabel('Predictions [incomeUSD]')\n","lims = [0, 50]\n","plt.xlim(lims)\n","plt.ylim(lims)\n","_ = plt.plot(lims, lims)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NJXY2BDz5Qle"},"source":["Now we can predict our test values"]},{"cell_type":"code","metadata":{"id":"MlEGGb5Z5Re0"},"source":["test_predictions = dnn_model.predict(test_features).flatten()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cTOKbKxG128Z"},"source":["As before, we collect the results on the test set in our test_results variable:"]},{"cell_type":"code","metadata":{"id":"B6RZVlWq15-d"},"source":["test_results['dnn_model'] = dnn_model.evaluate(test_features, test_labels, verbose=0)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"irE3Vbjb2DD7"},"source":["# **4. Comparing all 4 models**\n","Now that all the models are trained check the test-set performance and see how they did:"]},{"cell_type":"code","metadata":{"id":"Q6t4bb2s5wtr"},"source":["pd.DataFrame(test_results, index=['Mean absolute error [incomeUSD]']).T"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mmV-zMhE2XUw"},"source":["## Your Turn\n","\n","Which model performs the best? If you think about how each of the 4 models was built, why does your chosen model perform best?"]},{"cell_type":"markdown","metadata":{"id":"MoTgQPR62hlR"},"source":[]},{"cell_type":"markdown","metadata":{"id":"9Q6RPwex77sa"},"source":["#SOLUTIONS\n","To help you get unstuck:"]},{"cell_type":"code","metadata":{"id":"LuYUvBmv7ay9"},"source":["# This is the solution for task 2.1 above\n","\n","adult_dl = pd.DataFrame(adult, columns = ['age', 'educationyears', 'race','hoursperweek','incomeUSD'])\n","adult_dl.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JQtSMqLEyQSe"},"source":["adult_dl.race.unique()"],"execution_count":null,"outputs":[]}]}