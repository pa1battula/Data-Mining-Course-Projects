{"cells":[{"cell_type":"markdown","metadata":{"id":"TAbTzFEkU3X8"},"source":["# **Module 8: CLASSIFICATION: Trees**\n","In this notebook, we are going to study different ways of setting up the classic decision tree model in Python. At the end of this module, you will be able to:\n","* Explain what classification trees do\n","* Differentiate between types of classification trees\n","* Build simple classification trees\n","<center>\n","<img src = \"https://miro.medium.com/v2/resize:fit:640/format:webp/1*qMrZJof4R4LRnCFDvTj_Sg.jpeg\">\n","\n","**Be sure to expand all the hidden cells, run all the code, and do all the exercises--you will need the techniques for the lesson lab!**\n"]},{"cell_type":"markdown","metadata":{"id":"Yj-zwToQQfKv"},"source":["#**What is a Classification Tree (and why should you care)?**\n","A Classification tree assigns data records to discrete levels (or labels) in a class attribute. It is built through binary recursive partitioning, which means that data is being split into partitions, then sub-partitions, and sub-sub-partitions, and so on. The outcome is a tree with a root, several branches, and leaves like the one below (which comes from [this awesome post](https://towardsdatascience.com/https-medium-com-lorrli-classification-and-regression-analysis-with-decision-trees-c43cdbc58054) on classification trees that will tell you almost everything you need to know):\n","\n","<div>\n","<img src=\"https://raw.githubusercontent.com/shstreuber/Data-Mining/master/images/classtree.jpeg\" width=\"400\">\n","</div>\n"]},{"cell_type":"markdown","metadata":{"id":"vD7yiF_hb39f"},"source":["Now take a look at the first video in which I explain this in more detail (and with examples):\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":371},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1708400514034,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"},"user_tz":300},"id":"Nx_Do6Cqcb-i","outputId":"9fd06df8-fb52-4666-9a83-ac00e108b868"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/IPython/core/display.py:724: UserWarning: Consider using IPython.display.IFrame instead\n","  warnings.warn(\"Consider using IPython.display.IFrame instead\")\n"]},{"data":{"text/html":["<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/BxQAIyDxDKg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"],"text/plain":["<IPython.core.display.HTML object>"]},"execution_count":1,"metadata":{},"output_type":"execute_result"}],"source":["from IPython.display import HTML # This is just for me so I can embed videos\n","HTML('<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/BxQAIyDxDKg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>')"]},{"cell_type":"markdown","metadata":{"id":"Lg817VSMSgNm"},"source":["The **BIG QUESTION** about Classification Trees is: How does the machine know when to split off a new branch? And then, on a more practical level: How do you tell it when you want it to split the data?\n","\n","Well, there's some math involved.\n","\n","There are TWO major strategies to use for classification tree splits:\n","1. Information Gain\n","2. Gini Index\n","\n","Find out how these work in my video below:\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":336},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1696132184513,"user":{"displayName":"Sonja Streuber","userId":"03872648719424952237"},"user_tz":240},"id":"JIrmZo2SeXM3","outputId":"43d315e4-73cc-42b7-c568-6c3003f0637a"},"outputs":[{"data":{"text/html":["<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/d1AKQgjc4Ag\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"],"text/plain":["<IPython.core.display.HTML object>"]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["from IPython.display import HTML # This is just for me so I can embed videos\n","HTML('<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/d1AKQgjc4Ag\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>')"]},{"cell_type":"markdown","metadata":{"id":"FOnGM8ejepIg"},"source":["Still not quite sure about this? Go back to the [post on Towards Data Science](https://towardsdatascience.com/https-medium-com-lorrli-classification-and-regression-analysis-with-decision-trees-c43cdbc58054)."]},{"cell_type":"markdown","metadata":{"id":"2dQO2OAj4P3N"},"source":["#**0. Preparation and Setup**\n","There really isn't anything new going on between the modules on k Nearest Neighbor and Naive Bayes and this one. We are still lassifying our data, which means that we follow this process:\n","In machine learning, classification has these steps:\n","\n","1. Exploratory Data Analysis to see how the data is distributed and to determine what the class attribute in the dataset should be. This will be the attribute you'll predict later on\n","2. Preprocess the data (remove n/a, transform data types as needed, deal with missing data) and ensure that the dependent attribute is CATEGORICAL\n","3. Split the data into a training set and a test set\n","4. Build the model based on the training set\n","5. Test the model on the test set and compare the calculated class values to the actual class values shown in the test set with the help of a Confusion Matrix\n","6. Determine the quality of the model with the help of a Classification Report.\n","\n","As with our previous problems, we will use the insurance dataset again."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":630,"status":"ok","timestamp":1708560801525,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"},"user_tz":300},"id":"rKqieySsTlEi","outputId":"3236219d-e9bc-4283-e08d-6ca4347ca38b"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"insurance\",\n  \"rows\": 1338,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 18,\n        \"max\": 64,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          21,\n          45,\n          36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"male\",\n          \"female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.098186911679014,\n        \"min\": 15.96,\n        \"max\": 53.13,\n        \"num_unique_values\": 548,\n        \"samples\": [\n          23.18,\n          26.885\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoker\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"southeast\",\n          \"northeast\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12110.011236694001,\n        \"min\": 1121.8739,\n        \"max\": 63770.42801,\n        \"num_unique_values\": 1337,\n        \"samples\": [\n          8688.85885,\n          5708.867\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"insurance"},"text/html":["\n","  <div id=\"df-940c8efc-a8f1-4d55-bf11-32e9cf42335a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>smoker</th>\n","      <th>region</th>\n","      <th>charges</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>19</td>\n","      <td>female</td>\n","      <td>27.900</td>\n","      <td>0</td>\n","      <td>yes</td>\n","      <td>southwest</td>\n","      <td>16884.92400</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18</td>\n","      <td>male</td>\n","      <td>33.770</td>\n","      <td>1</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>1725.55230</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28</td>\n","      <td>male</td>\n","      <td>33.000</td>\n","      <td>3</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>4449.46200</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>33</td>\n","      <td>male</td>\n","      <td>22.705</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>21984.47061</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>32</td>\n","      <td>male</td>\n","      <td>28.880</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>3866.85520</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-940c8efc-a8f1-4d55-bf11-32e9cf42335a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-940c8efc-a8f1-4d55-bf11-32e9cf42335a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-940c8efc-a8f1-4d55-bf11-32e9cf42335a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7022cc71-62af-41a3-8dee-c1866fb07fb9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7022cc71-62af-41a3-8dee-c1866fb07fb9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7022cc71-62af-41a3-8dee-c1866fb07fb9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"text/plain":["   age     sex     bmi  children smoker     region      charges\n","0   19  female  27.900         0    yes  southwest  16884.92400\n","1   18    male  33.770         1     no  southeast   1725.55230\n","2   28    male  33.000         3     no  southeast   4449.46200\n","3   33    male  22.705         0     no  northwest  21984.47061\n","4   32    male  28.880         0     no  northwest   3866.85520"]},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from scipy import spatial\n","import statsmodels.api as sm\n","\n","from IPython.display import HTML # This is just for me so I can embed videos\n","from IPython.display import Image # This is just for me so I can embed images\n","\n","#Reading in the data as insurance dataframe\n","insurance = pd.read_csv(\"https://raw.githubusercontent.com/shstreuber/Data-Mining/master/data/insurance_with_categories.csv\")\n","\n","#Verifying that we can see the data\n","insurance.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":264,"status":"ok","timestamp":1708560534758,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"},"user_tz":300},"id":"XY04YuAaI1Gu","outputId":"dc41dae9-4a1a-405e-ac27-cdbd463285e6"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"computer\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"<=30\",\n          \"31\\u202640\",\n          \">40\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"income\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"high\",\n          \"medium\",\n          \"low\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"student\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yes\",\n          \"no\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"credit_rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"excellent\",\n          \"fair\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"buys_computer\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"computer"},"text/html":["\n","  <div id=\"df-a39e3d58-b5a0-47aa-8b3c-680f5638f2af\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>income</th>\n","      <th>student</th>\n","      <th>credit_rating</th>\n","      <th>buys_computer</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>&lt;=30</td>\n","      <td>high</td>\n","      <td>no</td>\n","      <td>fair</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>&lt;=30</td>\n","      <td>high</td>\n","      <td>no</td>\n","      <td>excellent</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>31…40</td>\n","      <td>high</td>\n","      <td>no</td>\n","      <td>fair</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>&gt;40</td>\n","      <td>medium</td>\n","      <td>no</td>\n","      <td>fair</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>&gt;40</td>\n","      <td>low</td>\n","      <td>yes</td>\n","      <td>fair</td>\n","      <td>yes</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a39e3d58-b5a0-47aa-8b3c-680f5638f2af')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a39e3d58-b5a0-47aa-8b3c-680f5638f2af button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a39e3d58-b5a0-47aa-8b3c-680f5638f2af');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8d513362-6c3a-433b-be8e-291a22b062cb\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8d513362-6c3a-433b-be8e-291a22b062cb')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8d513362-6c3a-433b-be8e-291a22b062cb button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"text/plain":["     age  income student credit_rating buys_computer\n","0   <=30    high      no          fair            no\n","1   <=30    high      no     excellent            no\n","2  31…40    high      no          fair           yes\n","3    >40  medium      no          fair           yes\n","4    >40     low     yes          fair           yes"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from scipy import spatial\n","import statsmodels.api as sm\n","\n","from IPython.display import HTML # This is just for me so I can embed videos\n","from IPython.display import Image # This is just for me so I can embed images\n","\n","#Reading in the data as insurance dataframe\n","computer = pd.read_csv(\"https://raw.githubusercontent.com/shstreuber/Data-Mining/master/data/buys_computer.csv\")\n","\n","#Verifying that we can see the data\n","computer.head()"]},{"cell_type":"markdown","metadata":{"id":"8WIw-g2X17xr"},"source":["Now we are ready for our Exploratory Data Analysis (EDA)."]},{"cell_type":"markdown","metadata":{"id":"O_5mxtgN0z1V"},"source":["#**1. Exploratory Data Analysis (EDA)**\n","This is always the first step. Even though we already know this dataset, let's walk through the motions again. In the previous module, we used the Pandas profiling package to generate a beautiful HTML interface with tabs that showed us everything we needed to know and then some more--but it required installing a new package. You may not always have the user permissions to do this. So, below is the basic process of data investigation."]},{"cell_type":"markdown","metadata":{"id":"6biFr9F-3ElZ"},"source":["##**1.1 Data Shape and Distribution**\n","Run each code line below to see what it does."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":285,"status":"ok","timestamp":1708560812961,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"},"user_tz":300},"id":"6Mhdmb_f3MEX","outputId":"2f764d28-b988-4791-d93d-c2ed257131c8"},"outputs":[{"name":"stdout","output_type":"stream","text":["***DATA OVERVIEW***\n"]},{"data":{"text/plain":["(                age   sex          bmi     children smoker     region  \\\n"," count   1338.000000  1338  1338.000000  1338.000000   1338       1338   \n"," unique          NaN     2          NaN          NaN      2          4   \n"," top             NaN  male          NaN          NaN     no  southeast   \n"," freq            NaN   676          NaN          NaN   1064        364   \n"," mean      39.207025   NaN    30.663397     1.094918    NaN        NaN   \n"," std       14.049960   NaN     6.098187     1.205493    NaN        NaN   \n"," min       18.000000   NaN    15.960000     0.000000    NaN        NaN   \n"," 25%       27.000000   NaN    26.296250     0.000000    NaN        NaN   \n"," 50%       39.000000   NaN    30.400000     1.000000    NaN        NaN   \n"," 75%       51.000000   NaN    34.693750     2.000000    NaN        NaN   \n"," max       64.000000   NaN    53.130000     5.000000    NaN        NaN   \n"," \n","              charges  \n"," count    1338.000000  \n"," unique           NaN  \n"," top              NaN  \n"," freq             NaN  \n"," mean    13270.422265  \n"," std     12110.011237  \n"," min      1121.873900  \n"," 25%      4740.287150  \n"," 50%      9382.033000  \n"," 75%     16639.912515  \n"," max     63770.428010  ,\n"," None)"]},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":["insurance.describe(include = 'all'), print(\"***DATA OVERVIEW***\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1708560820202,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"},"user_tz":300},"id":"st5DIA7pAk5b","outputId":"d08a2907-089a-4cf0-97c3-b21ccbd6987d"},"outputs":[{"name":"stdout","output_type":"stream","text":["***DATA CORRELATIONS\n"]},{"data":{"text/plain":["(               age       bmi  children   charges\n"," age       1.000000  0.109272  0.042469  0.299008\n"," bmi       0.109272  1.000000  0.012759  0.198341\n"," children  0.042469  0.012759  1.000000  0.067998\n"," charges   0.299008  0.198341  0.067998  1.000000,\n"," None)"]},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":["insurance.corr(numeric_only = True), print(\"***DATA CORRELATIONS\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":294,"status":"ok","timestamp":1708560650476,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"},"user_tz":300},"id":"Mc9VqCRiJgmW","outputId":"1f401048-4098-47a1-ee71-511d18b72da4"},"outputs":[{"name":"stdout","output_type":"stream","text":["***DATA OVERVIEW***\n"]},{"data":{"text/plain":["(         age  income student credit_rating buys_computer\n"," count     14      14      14            14            14\n"," unique     3       3       2             2             3\n"," top     <=30  medium      no          fair           yes\n"," freq       5       6       7             8             7,\n"," None)"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["computer.describe(include = 'all'), print(\"***DATA OVERVIEW***\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":344,"status":"ok","timestamp":1708560708741,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"},"user_tz":300},"id":"xT7bgIIrJgOs","outputId":"08fc6394-a973-446e-fdd4-75160dc62d26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***DATA CORRELATIONS\n"]},{"data":{"text/plain":["(Empty DataFrame\n"," Columns: []\n"," Index: [],\n"," None)"]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["computer.corr(numeric_only = True), print(\"***DATA CORRELATIONS\")"]},{"cell_type":"markdown","metadata":{"id":"wpRT_lu-A7oO"},"source":["What do these commands show you? Why is this important? Explain in the text field below:"]},{"cell_type":"markdown","metadata":{"id":"Ms5D7ikkCQdA"},"source":[]},{"cell_type":"markdown","metadata":{"id":"RzsJMd2c8VzN"},"source":["##**1.2 Some Basic Visualiations**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":882},"executionInfo":{"elapsed":1274,"status":"ok","timestamp":1708560835007,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"},"user_tz":300},"id":"Hc5RRKrV6XHH","outputId":"5d619c56-8bc0-4bde-ef7d-d9ba53f42be8"},"outputs":[{"data":{"text/plain":["<Axes: >"]},"execution_count":12,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 4 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Data Distribution (numeric data only)\n","insurance.hist()\n","insurance.plot()"]},{"cell_type":"markdown","metadata":{"id":"0cLAXDbdCy1h"},"source":["I know ... I promised you a pie plot in Module 1, and that was too hard back then. Here are two ways to do this.\n","\n","**NOTE** that all plots require numeric information, so you have to first count the size of each level in a categorical attribute and then build the pie size based on that. You already know groupby, so all you need to do is get the size of each group with the size() command--or you can make an array from the attribute and count the values. Both ways are shown below.\n","\n","**Uncomment each of the code lines below separately to see how they work**:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Oxif4cJsGwrw"},"outputs":[],"source":["# You can also use the groupby command we have learned earlier in this course.\n","#insurance.groupby('sex').size().plot(kind='pie', autopct='%.2f')\n","#insurance['sex'].value_counts().plot(kind='pie', autopct='%.2f')"]},{"cell_type":"markdown","metadata":{"id":"YiO1ZGogF-qz"},"source":["##Your Turn\n","Now analyze the second code line above and then display just the counts for the levels in the 'region' attribute:"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"elapsed":1035,"status":"ok","timestamp":1708560932490,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"},"user_tz":300},"id":"BQrh01KwGLPy","outputId":"1934d974-9aaa-4ff6-ee70-5d902f37772d"},"outputs":[{"data":{"text/plain":["<Axes: ylabel='region'>"]},"execution_count":15,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["insurance['region'].value_counts().plot(kind='pie', autopct='%.2f')"]},{"cell_type":"markdown","metadata":{"id":"CFDdFQr400ml"},"source":["#**2. Preprocessing: Building the Dataframe for Analysis**\n","We will, as before, use the \"region\" attribute as the class attribute and the numeric attributes (age, bmi, children, charges) in the insurance dataframe as the predictors. Since we already know that no data is missing, all we have to do is assemble the insurance2 dataframe we are going to use.\n","\n","In the code row below, **build the insurance2 dataframe we need** (if you don't remember how to do this, review last week's module in which we built this dataframe already):"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":279,"status":"ok","timestamp":1708561795895,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"},"user_tz":300},"id":"Co5zZ6tv1TEs","outputId":"5ef27946-378e-45ad-ef2e-06957033e508"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"insurance2\",\n  \"rows\": 1338,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 18,\n        \"max\": 64,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          21,\n          45,\n          36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.098186911679014,\n        \"min\": 15.96,\n        \"max\": 53.13,\n        \"num_unique_values\": 548,\n        \"samples\": [\n          23.18,\n          26.885,\n          29.26\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12110.011236694001,\n        \"min\": 1121.8739,\n        \"max\": 63770.42801,\n        \"num_unique_values\": 1337,\n        \"samples\": [\n          8688.85885,\n          5708.867,\n          11436.73815\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"southeast\",\n          \"northeast\",\n          \"southwest\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"insurance2"},"text/html":["\n","  <div id=\"df-4fd73890-e74f-46c2-927d-dbde368777c9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>charges</th>\n","      <th>region</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>19</td>\n","      <td>27.900</td>\n","      <td>0</td>\n","      <td>16884.92400</td>\n","      <td>southwest</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18</td>\n","      <td>33.770</td>\n","      <td>1</td>\n","      <td>1725.55230</td>\n","      <td>southeast</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28</td>\n","      <td>33.000</td>\n","      <td>3</td>\n","      <td>4449.46200</td>\n","      <td>southeast</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>33</td>\n","      <td>22.705</td>\n","      <td>0</td>\n","      <td>21984.47061</td>\n","      <td>northwest</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>32</td>\n","      <td>28.880</td>\n","      <td>0</td>\n","      <td>3866.85520</td>\n","      <td>northwest</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4fd73890-e74f-46c2-927d-dbde368777c9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4fd73890-e74f-46c2-927d-dbde368777c9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4fd73890-e74f-46c2-927d-dbde368777c9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b21900c3-21aa-444e-a883-4dc9f99d68bc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b21900c3-21aa-444e-a883-4dc9f99d68bc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b21900c3-21aa-444e-a883-4dc9f99d68bc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"text/plain":["   age     bmi  children      charges     region\n","0   19  27.900         0  16884.92400  southwest\n","1   18  33.770         1   1725.55230  southeast\n","2   28  33.000         3   4449.46200  southeast\n","3   33  22.705         0  21984.47061  northwest\n","4   32  28.880         0   3866.85520  northwest"]},"execution_count":23,"metadata":{},"output_type":"execute_result"}],"source":["insurance2 = pd.DataFrame(insurance, columns = ['age', 'bmi', 'children','charges','region'])\n","insurance2.head()"]},{"cell_type":"markdown","metadata":{"id":"GdBOZ8EFL31k"},"source":["#**3. Setting up the Training and the Test Sets**\n","Just like before, we need to build the training set and the test set again. We want a **80% training/ 20% test split**. Finish the code below to build this (if you can't remember how to do this, use the code from any of the two previous workbooks):"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":329,"status":"ok","timestamp":1708561821212,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"},"user_tz":300},"id":"fqnZw_LrL2eZ","outputId":"08df7b3c-83bb-439e-efb2-8ab34d574877"},"outputs":[{"name":"stdout","output_type":"stream","text":["X_train shape: (1070, 4)\n","X_test shape: (268, 4)\n"]}],"source":["from sklearn.model_selection import train_test_split\n","x=insurance2.iloc[:,:4] # all parameters\n","y=insurance2['region'] # class labels 'southwest', 'southeast', 'northwest', 'northeast'\n","X_train, X_test, y_train, y_test =   train_test_split(x, y, test_size=.2)                           # COMPLETE THIS LINE!\n","print(\"X_train shape: {}\".format(X_train.shape))\n","print(\"X_test shape: {}\".format(X_test.shape))"]},{"cell_type":"markdown","metadata":{"id":"LPq3h9nMZeWj"},"source":["#**4. Build and Train the Tree classifier**\n","We are building a classifier with the [DecisionTreeClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html) function from scikit learn.\n","\n","##**4.1 Building the Classifier**\n","Some of the more interesting parameters are:\n","* criterion{“gini”, “entropy”}, default=”gini”\n","The function to measure the quality of a split. Supported criteria are “gini” for the Gini impurity and “entropy” for the information gain. Need more information? Click [here](https://towardsdatascience.com/gini-index-vs-information-entropy-7a7e4fed3fcb).\n","\n","* splitter{“best”, “random”}, default=”best”\n","The strategy used to choose the split at each node. Supported strategies are “best” to choose the best split and “random” to choose the best random split.\n","\n","* max_depthint, default=None\n","The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples. This may easily cause overfitting."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mf_3YnrvabQ6"},"outputs":[],"source":["# Importing the tree library.\n","# We are setting the quality of the split measurement to entropy, so that the tree will work with Information Gain, and calling our classifier \"clf\".\n","\n","from sklearn import tree\n","clf = tree.DecisionTreeClassifier(criterion='entropy')"]},{"cell_type":"markdown","metadata":{"id":"a9Bz5lp9bkUm"},"source":["##**4.2 Training the Classifier**\n","clf is our decision tree classifier. As before, we use .fit to train the classifier on the dataset.\n","X_train[['age', 'bmi', 'children', 'charges']] are all the feature columns of the training set, and y_train is 'region'. Based on these we want to make a prediction."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1708561831276,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"},"user_tz":300},"id":"FbCEF6dBbpTI","outputId":"0c06d44c-a91a-4762-cc07-c03f024a17dd"},"outputs":[{"data":{"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;)</pre></div></div></div></div></div>"],"text/plain":["DecisionTreeClassifier(criterion='entropy')"]},"execution_count":27,"metadata":{},"output_type":"execute_result"}],"source":["clf.fit(X_train, y_train)"]},{"cell_type":"markdown","metadata":{"id":"P10slgA6gAtJ"},"source":["Check out the configuration of this classifier! We could already set a max_depth, so that the tree won't overfit. We call that \"pruning.\" Here, pruning means to limit how many branches and leaves a tree can develop:\n","\n","<center>\n","<img src = \"https://miro.medium.com/v2/resize:fit:1400/1*ElW-ERvIfiV6RSbs74RO_A.png\" width = 600>\n","</center>\n","\n","And here is an example:\n","<center>\n","<img src = \"https://miro.medium.com/v2/resize:fit:1086/0*Yy738UDqVRlsRwxJ\" width = 600>\n","</center>\n","\n","In this example, the right side of the tree shows that more nodes lead to \"No Loan\" than \"Loan\"--but we're not really interested in whether or not the loan applicant has a criminal record in the first place; our focus is on whether the loan applicant has another loan from the same bank. So, we simplify the tree on the left by not even considering the Criminal Record? branch; instead, we decide that anyone with an income < 30K is not eligible for a loan at all (confirmed by the 2 green leaves vs the single blue leaf on the Criminal Record? branch).\n","\n","You can also see that, **in our insurance classification tree above**, the min_samples_split is set to 2 (default), which shows you that the basic assumption is a binary split, just like in the loan example. Of course, 2 samples is also really small ..."]},{"cell_type":"markdown","metadata":{"id":"On1vma21c6lI"},"source":["##**4.3 Visualizing the tree**\n","\n","We are going to use [pydotplus](https://pydotplus.readthedocs.io/) for this purpose. This will create a neat tree as a graphic that we can export and embed in another document, even. Run the code below. **NOTE**: This may take a while to execute!"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":200,"output_embedded_package_id":"1YTDKQufEf5gN1GYg_u0dJ7gmmbxt8UoQ"},"executionInfo":{"elapsed":73391,"status":"ok","timestamp":1708561928640,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"},"user_tz":300},"id":"1IAHWgZmdHRW","outputId":"f1ea5a74-93db-4a63-8eb1-1bab6a9b0b27"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["from IPython.display import Image\n","import pydotplus\n","dot_data = tree.export_graphviz(clf, out_file=\"insurance.dot\",\n","                         feature_names=['age', 'bmi', 'children', 'charges'],\n","                         class_names=['southwest', 'southeast', 'northwest','northeast'],\n","                         filled=True, rounded=True,\n","                         special_characters=True)\n","graph = pydotplus.graphviz.graph_from_dot_file(\"insurance.dot\")\n","#graph = pydotplus.graph_from_dot_data(dot_data)\n","Image(graph.create_png())"]},{"cell_type":"markdown","metadata":{"id":"oDbf18YjeKbG"},"source":["WOW! That is a big tree (but then, this isn't the [tiny iris dataset](https://towardsdatascience.com/https-medium-com-lorrli-classification-and-regression-analysis-with-decision-trees-c43cdbc58054), either!). Click on the image to see more detail.\n","\n","In the shapes above, we are seeing something like this:\n","<center>\n","<img src=\"https://raw.githubusercontent.com/shstreuber/Data-Mining/master/images/ctree_insurance_node.JPG\" width=\"300\" align=center>\n","</center>\n","\n","So the number of samples is 1,070. 261 are southwest, 256 are southeast, 295 are northwest, and 258 northeast. Hence, class = northwest (because it has the highest count with 295).\n","\n","From the samples and values lines we can calculate entropy, or [information gain](https://victorzhou.com/blog/information-gain):\n","\n","$$\n","info([261, 256, 295,258])=-\\sum{261\\over1070}log_2{({261\\over1070})}+{256\\over1070}log_2{({256\\over1070})}+{295\\over1070}log_2{({295\\over1070})}+{258\\over1070}log_2{({258\\over1070})} = 1.997\n","$$\n","So the entropy of the node is 1.997.\n","\n","Lastly, the first line of the node graphic contains the first split criterion:  The bmi must be smaller or equal to 32.983 to get to the next node in the hierarchy."]},{"cell_type":"markdown","metadata":{"id":"gy2eEMq3gHGC"},"source":["##**5. Apply the model to the Test Set**\n","Once we fit our classifier to the data (i.e. we trained it) we can use the classifier to classify samples."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"etLxnittWVnw"},"outputs":[],"source":["insurance_predictions = clf.predict(X_test)"]},{"cell_type":"markdown","metadata":{"id":"MiN9SqhmvqqZ"},"source":["#**6. Evaluate the Quality of the Model**\n","OK, now we can calculate the accuracy score and then look at the Confusion Matrix. We did the same thing in the previous module, so what follows should look familiar to you."]},{"cell_type":"markdown","metadata":{"id":"mp9p8I9Mw5Xj"},"source":["##**6.1 Accuracy Score**\n","\n","First, the accuracy score:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wJfmd6xhwE_k"},"outputs":[],"source":["from sklearn.metrics import accuracy_score\n","accuracy_score(y_test, insurance_predictions)"]},{"cell_type":"markdown","metadata":{"id":"gu6Xr18NyOMo"},"source":["Would you accept a result of 34% on an exam? (Take a look at the grading scale for this course to see where that would land you). Let's see what the Confusion Matrix tells us about this lousy score."]},{"cell_type":"markdown","metadata":{"id":"PP2tHRaOiKdO"},"source":["##**6.2 Confusion Matrix**\n","And now the Confusion Matrix:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vkFxx6fzhoki"},"outputs":[],"source":["from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import ConfusionMatrixDisplay\n","\n","cm = confusion_matrix(y_test, insurance_predictions, labels=clf.classes_)\n","cm_display = ConfusionMatrixDisplay(cm, display_labels=clf.classes_).plot()"]},{"cell_type":"markdown","metadata":{"id":"2xCQYkOTyoQT"},"source":["Let's look at the \"northwest\" row: Out of 16+20+20+16 = 72 true northwest values, only 20 were predicted correctly. 16 were predicted as northeast, 20 as southeast, and 16 as southwest.\n","What about the \"southwest\" row? Are the results better or worse? Write your explanation into the text field below:"]},{"cell_type":"markdown","metadata":{"id":"VimEARFQznBx"},"source":[]},{"cell_type":"markdown","metadata":{"id":"jCwtXVeikzSe"},"source":["##**6.3 Classification Report**\n","Let's predict our y values so that we can build our classification report:"]},{"cell_type":"markdown","metadata":{"id":"Hvz4DcRRiYsl"},"source":["And here is the classification report:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7WtL372SimXm"},"outputs":[],"source":["import sklearn.metrics as metrics\n","from sklearn.metrics import classification_report\n","\n","print(metrics.classification_report(y_test, insurance_predictions, labels=['southwest', 'southeast', 'northwest','northeast']))"]},{"cell_type":"markdown","metadata":{"id":"v0jsX4ft0GtM"},"source":["Can you explain what these numbers mean for the insurance2 dataset? If you're not sure, take a look at the previous workbook, in which they are all explained."]},{"cell_type":"markdown","metadata":{"id":"UIPD_vWAX6Is"},"source":["#**Your Turn**\n","Here is the buys_computer dataset from the instructor video. See if you can build and analyze a tree yourself!"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ay-MUbt0V5ZZ","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1708573962524,"user_tz":300,"elapsed":309,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"b687106d-9a91-4f82-cd93-1bd044d03e0b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     age  income student credit_rating buys_computer\n","0   <=30    high      no          fair            no\n","1   <=30    high      no     excellent            no\n","2  31…40    high      no          fair           yes\n","3    >40  medium      no          fair           yes\n","4    >40     low     yes          fair           yes"],"text/html":["\n","  <div id=\"df-e2687e71-81fc-4ae8-8374-b23cbdcefcce\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>income</th>\n","      <th>student</th>\n","      <th>credit_rating</th>\n","      <th>buys_computer</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>&lt;=30</td>\n","      <td>high</td>\n","      <td>no</td>\n","      <td>fair</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>&lt;=30</td>\n","      <td>high</td>\n","      <td>no</td>\n","      <td>excellent</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>31…40</td>\n","      <td>high</td>\n","      <td>no</td>\n","      <td>fair</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>&gt;40</td>\n","      <td>medium</td>\n","      <td>no</td>\n","      <td>fair</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>&gt;40</td>\n","      <td>low</td>\n","      <td>yes</td>\n","      <td>fair</td>\n","      <td>yes</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2687e71-81fc-4ae8-8374-b23cbdcefcce')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e2687e71-81fc-4ae8-8374-b23cbdcefcce button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e2687e71-81fc-4ae8-8374-b23cbdcefcce');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1a7a298e-d3ba-4672-a8e8-c45b3efeb603\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1a7a298e-d3ba-4672-a8e8-c45b3efeb603')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1a7a298e-d3ba-4672-a8e8-c45b3efeb603 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"buys_computer","summary":"{\n  \"name\": \"buys_computer\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"<=30\",\n          \"31\\u202640\",\n          \">40\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"income\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"high\",\n          \"medium\",\n          \"low\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"student\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yes\",\n          \"no\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"credit_rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"excellent\",\n          \"fair\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"buys_computer\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":98}],"source":["# Importing the buys_computer dataset\n","\n","buys_computer = pd.read_csv('https://raw.githubusercontent.com/shstreuber/Data-Mining/master/data/buys_computer.csv')\n","buys_computer.head()"]},{"cell_type":"code","source":["buys_computer.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"te0WXb5o8b48","executionInfo":{"status":"ok","timestamp":1708573991150,"user_tz":300,"elapsed":134,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"7fe67cdf-c6a2-47d0-ed90-e85c1486bbd2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['age', 'income', 'student', 'credit_rating', 'buys_computer'], dtype='object')"]},"metadata":{},"execution_count":99}]},{"cell_type":"code","source":["buys_computer[['age', 'income', 'student', 'credit_rating']] = buys_computer[['age', 'income', 'student', 'credit_rating']].astype('category')"],"metadata":{"id":"hKrBStSq7v0W"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["buys_computer['age'] = buys_computer['age'].cat.codes\n","buys_computer['income'] = buys_computer['income'].cat.codes\n","buys_computer['student'] = buys_computer['student'].cat.codes\n","buys_computer['credit_rating'] = buys_computer['credit_rating'].cat.codes"],"metadata":{"id":"FbV0U76m88NB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["buys_computer.corr()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":229},"id":"I7fA8hSD9Xb9","executionInfo":{"status":"ok","timestamp":1708574398323,"user_tz":300,"elapsed":151,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"eb931dbd-5369-42e8-a907-e8e45f181f37"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-110-e0f7d633226b>:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n","  buys_computer.corr()\n"]},{"output_type":"execute_result","data":{"text/plain":["                    age    income       student  credit_rating\n","age            1.000000  0.414161  8.944272e-02   7.745967e-02\n","income         0.414161  1.000000  0.000000e+00  -1.980295e-01\n","student        0.089443  0.000000  1.000000e+00  -6.409876e-17\n","credit_rating  0.077460 -0.198030 -6.409876e-17   1.000000e+00"],"text/html":["\n","  <div id=\"df-38167fd6-6638-4976-bb21-591e4b58529a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>income</th>\n","      <th>student</th>\n","      <th>credit_rating</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>age</th>\n","      <td>1.000000</td>\n","      <td>0.414161</td>\n","      <td>8.944272e-02</td>\n","      <td>7.745967e-02</td>\n","    </tr>\n","    <tr>\n","      <th>income</th>\n","      <td>0.414161</td>\n","      <td>1.000000</td>\n","      <td>0.000000e+00</td>\n","      <td>-1.980295e-01</td>\n","    </tr>\n","    <tr>\n","      <th>student</th>\n","      <td>0.089443</td>\n","      <td>0.000000</td>\n","      <td>1.000000e+00</td>\n","      <td>-6.409876e-17</td>\n","    </tr>\n","    <tr>\n","      <th>credit_rating</th>\n","      <td>0.077460</td>\n","      <td>-0.198030</td>\n","      <td>-6.409876e-17</td>\n","      <td>1.000000e+00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38167fd6-6638-4976-bb21-591e4b58529a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-38167fd6-6638-4976-bb21-591e4b58529a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-38167fd6-6638-4976-bb21-591e4b58529a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d3582e3b-6dbe-4df2-a905-182f69fcda69\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d3582e3b-6dbe-4df2-a905-182f69fcda69')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d3582e3b-6dbe-4df2-a905-182f69fcda69 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"buys_computer\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.43227652408148753,\n        \"min\": 0.07745966692414831,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.41416109397757994,\n          0.07745966692414831,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5294654819715611,\n        \"min\": -0.19802950859533497,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.0,\n          -0.19802950859533497,\n          0.41416109397757994\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"student\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4869218419315377,\n        \"min\": -6.409875621278546e-17,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.0,\n          -6.409875621278546e-17,\n          0.08944271909999159\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"credit_rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5328746992899143,\n        \"min\": -0.19802950859533497,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -0.19802950859533497,\n          1.0,\n          0.07745966692414831\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":110}]},{"cell_type":"code","source":["buys_computer.buys_computer.replace('?','NA', inplace=True)\n","buys_computer.buys_computer.unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cN0GPgWS9wYI","executionInfo":{"status":"ok","timestamp":1708574775976,"user_tz":300,"elapsed":155,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"46839efe-405a-4622-a8b1-ac0fd122b8b3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['no', 'yes', 'NA'], dtype=object)"]},"metadata":{},"execution_count":113}]},{"cell_type":"code","source":["buys_computer.describe()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"KVXORmiL_kfm","executionInfo":{"status":"ok","timestamp":1708576869613,"user_tz":300,"elapsed":144,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"2ccb3ffa-369f-49b0-c125-434cbdfa9f39"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             age     income    student  credit_rating\n","count  14.000000  14.000000  14.000000      14.000000\n","mean    1.071429   1.142857   0.500000       0.571429\n","std     0.828742   0.864438   0.518875       0.513553\n","min     0.000000   0.000000   0.000000       0.000000\n","25%     0.250000   0.250000   0.000000       0.000000\n","50%     1.000000   1.000000   0.500000       1.000000\n","75%     2.000000   2.000000   1.000000       1.000000\n","max     2.000000   2.000000   1.000000       1.000000"],"text/html":["\n","  <div id=\"df-02a5082e-c1b6-4766-987c-b719fcc02963\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>income</th>\n","      <th>student</th>\n","      <th>credit_rating</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>14.000000</td>\n","      <td>14.000000</td>\n","      <td>14.000000</td>\n","      <td>14.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>1.071429</td>\n","      <td>1.142857</td>\n","      <td>0.500000</td>\n","      <td>0.571429</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.828742</td>\n","      <td>0.864438</td>\n","      <td>0.518875</td>\n","      <td>0.513553</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>0.250000</td>\n","      <td>0.250000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.500000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2.000000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2.000000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-02a5082e-c1b6-4766-987c-b719fcc02963')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-02a5082e-c1b6-4766-987c-b719fcc02963 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-02a5082e-c1b6-4766-987c-b719fcc02963');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1a2738c4-b3a0-4c4b-bc13-cc777491617b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1a2738c4-b3a0-4c4b-bc13-cc777491617b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1a2738c4-b3a0-4c4b-bc13-cc777491617b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"buys_computer\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.644213886111838,\n        \"min\": 0.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          14.0,\n          1.0714285714285714,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.638839164304265,\n        \"min\": 0.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          14.0,\n          1.1428571428571428,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"student\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.786966832765969,\n        \"min\": 0.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.5,\n          1.0,\n          0.5188745216627708\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"credit_rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.761556602028485,\n        \"min\": 0.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.5714285714285714,\n          1.0,\n          0.5135525910130955\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":118}]},{"cell_type":"code","source":["buys_computer.buys_computer.unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d70Kdo2iIBzV","executionInfo":{"status":"ok","timestamp":1708577059839,"user_tz":300,"elapsed":139,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"2589a55f-d206-4294-b6a4-aa3bcd398dd6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['no', 'yes', 'NA'], dtype=object)"]},"metadata":{},"execution_count":123}]},{"cell_type":"code","source":["buys_computer.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"miplaLZ5ISbi","executionInfo":{"status":"ok","timestamp":1708577078206,"user_tz":300,"elapsed":11,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"07a86803-df4d-4678-a7ed-9f2e3969417d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['age', 'income', 'student', 'credit_rating', 'buys_computer'], dtype='object')"]},"metadata":{},"execution_count":124}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1tYqwbLZ0kVI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708578423162,"user_tz":300,"elapsed":164,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"a82c0c78-f41e-486d-a090-e5d805fc7faf"},"outputs":[{"output_type":"stream","name":"stdout","text":["X_train shape: (11, 4)\n","X_test shape: (3, 4)\n"]}],"source":["# Set up the training and test sets in this code cell\n","from sklearn.model_selection import train_test_split\n","x=buys_computer.iloc[:,:4] # all parameters\n","y=buys_computer['buys_computer'] # class labels 'southwest', 'southeast', 'northwest', 'northeast'\n","X_train, X_test, y_train, y_test =   train_test_split(x, y, test_size=0.20)                           # COMPLETE THIS LINE!\n","print(\"X_train shape: {}\".format(X_train.shape))\n","print(\"X_test shape: {}\".format(X_test.shape))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"f6q_sR6Z0lKD","colab":{"base_uri":"https://localhost:8080/","height":74},"executionInfo":{"status":"ok","timestamp":1708578673155,"user_tz":300,"elapsed":145,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"cd74119c-b194-472e-ffd1-e9335cee9674"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(criterion='entropy')"],"text/html":["<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":131}],"source":["# Build and train the classifier in this cell\n","\n","from sklearn import tree\n","clf = tree.DecisionTreeClassifier(criterion='entropy')\n","clf.fit(X_train, y_train)"]},{"cell_type":"code","source":["from IPython.display import Image\n","import pydotplus\n","dot_data = tree.export_graphviz(clf, out_file=\"buys_computer.dot\",\n","                         feature_names=['age', 'income', 'student', 'credit_rating'],\n","                         class_names=['no', 'yes', 'NA'],\n","                         filled=True, rounded=True,\n","                         special_characters=True)\n","graph = pydotplus.graphviz.graph_from_dot_file(\"buys_computer.dot\")\n","#graph = pydotplus.graph_from_dot_data(dot_data)\n","Image(graph.create_png())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":594},"id":"rYmTRHEIN736","executionInfo":{"status":"ok","timestamp":1708578675010,"user_tz":300,"elapsed":397,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"adb62860-ebca-4d8a-85ce-9e3be72db7f8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"image/png":"\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{},"execution_count":132}]},{"cell_type":"code","source":[],"metadata":{"id":"BNZv54QYOzyr"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r9QOVAMe0mkY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708579216955,"user_tz":300,"elapsed":153,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"6d9841cf-de62-4ed9-c1b6-44f5a82ec989"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.3333333333333333"]},"metadata":{},"execution_count":136}],"source":["# Calculate the accuracy score in this cell\n","buys_computer_predictions = clf.predict(X_test)\n","from sklearn.metrics import accuracy_score\n","accuracy_score(y_test, buys_computer_predictions)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"25uGQ2Kq00s6","colab":{"base_uri":"https://localhost:8080/","height":455},"executionInfo":{"status":"ok","timestamp":1708580269564,"user_tz":300,"elapsed":484,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"db6781d5-4d9f-4065-c3c4-c943caff508a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Build the Confusion matrix in this cell\n","from sklearn.metrics import confusion_matrix;\n","from sklearn.metrics import ConfusionMatrixDisplay;\n","\n","cm = confusion_matrix(y_test, buys_computer_predictions, labels=clf.classes_);\n","cm_display = ConfusionMatrixDisplay(cm, display_labels=clf.classes_).plot();"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dhl3yCbf03yX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708580274980,"user_tz":300,"elapsed":187,"user":{"displayName":"Pavan Kumar Battula","userId":"16738401156277944723"}},"outputId":"6769379a-0117-4daa-8c2a-c2acaa03e975"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","          no       0.00      0.00      0.00         2\n","         yes       0.33      1.00      0.50         1\n","          NA       0.00      0.00      0.00         0\n","\n","   micro avg       0.33      0.33      0.33         3\n","   macro avg       0.11      0.33      0.17         3\n","weighted avg       0.11      0.33      0.17         3\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}],"source":["# Build the Classification report in this cell\n","import sklearn.metrics as metrics\n","from sklearn.metrics import classification_report\n","\n","print(metrics.classification_report(y_test, buys_computer_predictions, labels=['no', 'yes', 'NA']))"]},{"cell_type":"markdown","metadata":{"id":"dfXirpEz07fE"},"source":["Now interpret your findings in the text field below."]},{"cell_type":"markdown","metadata":{"id":"lBRXsve51BdF"},"source":[]},{"cell_type":"markdown","metadata":{"id":"Yzm2qZq42gK7"},"source":["# Solutions (to help you get to the end of this workbook)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qwVb732S1061"},"outputs":[],"source":["# This is the solution for task 2 above.\n","insurance2 = pd.DataFrame(insurance, columns = ['age', 'bmi', 'children','charges','region'])\n","insurance2.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uN7kB8IM1NXF"},"outputs":[],"source":["# This is the solution for task 3 above:\n","X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.2)"]}],"metadata":{"colab":{"provenance":[{"file_id":"1CTQbqlMzAemeIs25P-W4akXN9_O9MoFi","timestamp":1696132026635}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}